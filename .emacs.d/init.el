;;; Init.el --- Summary

;; ==================
;; Autogenerated stuff
;; =================

;; This must at the top, otherwise Emacs will cry.
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("ff7625ad8aa2615eae96d6b4469fcc7d3d20b2e1ebc63b761a349bebbb9d23cb" default)))
 '(package-selected-packages
   (quote
    (dracula-theme sr-speedbar with-editor rich-minority ggtags dash company-irony)))
 '(scroll-bar-mode nil)
 '(scroll-conservatively 100)
 '(speedbar-default-position (quote left)))

(custom-set-faces
;; custom-set-faces was added by Custom.
;; If you edit it by hand, you could mess it up, so be careful.
;; Your init file should contain only one such instance.
;; If there is more than one, they won't work right.
)

;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)

;; =============================
;; Path
;; =============================

;; This sets the Emacs "PATH" environment variable and the `exec-path`
;; variable to the same value your login shell sees. The reason this
;; is necessary is because of this:
;;
;; http://developer.apple.com/library/mac/#qa/qa1067/_index.html
;;
;; Basically apps launched from Finder inherit their environment from
;; a .plist file rather than the shell environment.

(setq extra-path
     (concat ":/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin"
             ":/opt/local/bin:"))

(defun set-exec-path-from-shell-PATH ()
 "Sets the exec-path to the same value used by the user shell"
 (let ((path-from-shell
        (replace-regexp-in-string
         "[[:space:]\n]*$" ""
         (shell-command-to-string "$SHELL -l -c 'echo $PATH'"))))
   (setenv "PATH" (concat path-from-shell extra-path))
   (setq exec-path (split-string path-from-shell path-separator))))

;; call function now
(set-exec-path-from-shell-PATH)

;; =============================
;; Packages
;; =============================

;; Use more package-archives (M-x list-packages)
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")))

;; Tell Emacs where to look for packages
(let ((default-directory "~/.emacs.d/ioopm-packages/"))
  (normal-top-level-add-subdirs-to-load-path))

(let ((default-directory "~/.emacs.d/elpa/"))
  (normal-top-level-add-subdirs-to-load-path))

;; Ace window
(require 'ace-window)

;; imenu
;; Language-aware navigation
(require 'imenu-anywhere)
(setq imenu-auto-rescan t)

;; speedbar
(setq speedbar-show-unknown-files t)

;; ggtags
(require 'ggtags)
(add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
              (ggtags-mode 1))))

;; Multiple cursors
;; What it sounds like
(require 'multiple-cursors)

;; Visual Regexp
;; Replace normal query-replace with a better one
(require 'visual-regexp)

;; Expand region
;; Select the thing I'm currently inside
(require 'expand-region)

;; use y = yes, n = no
(defalias 'yes-or-no-p 'y-or-n-p)

(load "~/.emacs.d/config/load-directory")
(load-directory "~/.emacs.d/config")
